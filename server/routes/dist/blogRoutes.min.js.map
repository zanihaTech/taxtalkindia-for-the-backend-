{"version":3,"sources":["blogRoutes.js"],"names":["express","require","multer","router","Router","BlogPost","diskStorage","destination","req","file","cb","filename","Date","now","upload","storage","res","trendingPosts","regeneratorRuntime","async","_context","prev","next","awrap","find","title","likes","image","sort","get","sent","json","t0","status","message","error","stop","posts","_context2","date","findById","params","id","post","_context3","single","_req$body","content","author","imageFile","newPost","savedPost","_context4","console","log","body","save","put","_req$body2","updatedPost","_context5","findByIdAndUpdate","new","abrupt","deletedPost","_context6","findByIdAndDelete","likedPost","_context7","search","searchRegex","_context8","query","RegExp","$or","length","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASD,QAAQ,UADjBD,SAAUC,QAAQ,sBAGlBE,OAASH,QAAQI,SADjBC,QAAWJ,OAAQK,YAAA,CAKvBC,YAAa,SAACC,EAAKC,EAAMC,GAJrBP,EAAAA,KAASH,eAGfW,SAAa,SAAAH,EAAGN,EAAOI,GACrBC,EAAAA,KAAWK,KAAEC,MAAA,IAAAJ,EAACD,iBAIVM,OAAOF,OAAA,CAAAG,QAAAA,UAIbZ,OAAMW,IAAM,YAAU,SAAAN,EAAAQ,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAEtBlB,SAAAmB,KAAA,GAAA,CAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA,IAIOC,KAAK,CAAEF,OAAQ,IAHfG,MAAI,IAHW,KAAA,EAEtBZ,EAFsBG,EAAAU,KAGEd,EAAAe,KAAAd,GAHFG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,MAAA,GAGEJ,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,gCAAAC,MAAAf,EAAAY,GAAAE,UAHF,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAGEjC,OAAA0B,IAAA,IAAA,SAAArB,EAAAQ,GAAA,IAAAqB,EAAA,OAAAnB,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAAAJ,mBAAAK,MAE0BlB,SAAAmB,OAAAI,KAAA,CAAAW,MAAA,KAF1B,KAAA,EAEsCb,EAFtCY,EAAAR,KAEgDH,EAAAA,KAAAA,GAFhDW,EAAAhB,KAAA,GAAA,MAAA,KAAA,EAAAgB,EAAAjB,KAAA,EAAAiB,EAAAN,GAAAM,EAAA,MAAA,GAGVZ,EAAAA,OAAAA,KAAQK,KAAA,CAAAG,QAAA,uBAAAC,MAAAG,EAAAN,GAAAE,UAHE,KAAA,GAAA,IAAA,MAAA,OAAAI,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAKpBpB,OAAAA,IAAAA,OAASC,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MALWZ,SAAAmC,SAAAhC,EAAAiC,OAAAC,KAKXzB,KAAAA,EAAAA,GALW0B,EAKX1B,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SALWD,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,oBAKXjB,KAAAA,EALWD,EAAAe,KAAAY,GAKX1B,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEciB,EAAAA,OAAAA,KAAOH,KAAE,CAAAG,QAAA,0BAAXC,MAAAS,EAAAZ,GAAAE,UAFZjB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OALWd,OAAAwC,KAAA,UAAA7B,OAAA+B,OAAA,aAAA,SAAArC,EAAAQ,GAAA,IAAA8B,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjC,mBAAAC,MAAA,SAAAiC,GAAA,OAAA,OAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,KAAA,EAAA,OAAA+B,QAAAC,IAAA,iBAAA9C,EAAAC,MAAA4C,QAAAC,IAAA,gBAAA9C,EAAA+C,MAAAT,EAAAtC,EAAA+C,KAAA9B,EAAAqB,EAAArB,MAAAsB,EAAAD,EAAAC,QAAAC,EAAAF,EAAAE,OAAAC,EAAAzC,EAAAC,KAAA,YAAAD,EAAAC,KAAAE,SAAA,KAAAyC,EAAA/B,KAAA,EAYxB6B,EAAgB,IAAA7C,SAAA,CAAAoB,MAAAA,EAAAsB,QAAAA,EAAAC,OAAAA,GAAA,QAAArB,MAAAsB,EAAAvB,MAAA,EAAAa,KAAA,IAAA3B,OAZQwC,EAAA9B,KAAA,EAAAJ,mBAAAK,MAc8B2B,EAAAM,QAd9B,KAAA,EAcuBjB,EAdvBa,EAAAtB,KAcqBd,EAAAiB,OAF7B,KAAAF,KAAAoB,GAZQC,EAAA9B,KAAA,GAAA,MAAA,KAAA,GAAA8B,EAAA/B,KAAA,GAAA+B,EAAApB,GAAAoB,EAAA,MAAA,GAYRpC,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,0BAAAC,MAAAiB,EAAApB,GAAAE,UAZQ,KAAA,GAAA,IAAA,MAAA,OAAAkB,EAAAhB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAYRjC,OAAAsD,IAAA,OAAA3C,OAAA+B,OAAA,aAAA,SAAArC,EAAAQ,GAAA,IAAA0C,EAAAjC,EAAAsB,EAAAC,EAAAC,EAAAU,EAAA,OAAAzC,mBAAAC,MAAA,SAAAyC,GAAA,OAAA,OAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,KAAA,EAAA,OAAAoC,EAgDqBlD,EAAI+C,KAA/B9B,EAhDMiC,EAgDNjC,MAAOsB,EAhDDW,EAgDCX,QAASC,EAhDVU,EAgDUV,OAhDVC,EAAAzC,EAAAC,KAAA,YAAAD,EAAAC,KAAAE,SAAA,KAAAiD,EAAAvC,KAAA,EAAAuC,EAAAtC,KAAA,EAAAJ,mBAAAK,MAKZlB,SAAqBwD,kBAAE3B,EAAAA,OAAAA,GAAiCC,CAAAA,MAAAA,EAAAA,QAAAA,EAAOa,OAAAA,EAAId,MAAAA,GAAAA,EAAAA,KAAAA,OAA9C,CAAA4B,KAArB,KALY,KAAA,EAAA,GAKZ9C,EALY4C,EAAA9B,KAAA,CAAA8B,EAAAtC,KAAA,EAAA,MAAA,OAAAsC,EAAAG,OAAA,SAAA/C,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,oBAAA,KAAA,EAAAlB,EAAAe,KAAA4B,GAAAC,EAAAtC,KAAA,GAAA,MAAA,KAAA,GAAAsC,EAAAvC,KAAA,GAAAuC,EAAA5B,GAAA4B,EAAA,MAAA,GAgEZ5C,EAAIiB,OAAO,KAAKF,KAAK,CAAEG,QAAS,0BAA2BC,MAAOyB,EAAA5B,GAAIE,UAhE1D,KAAA,GAAA,IAAA,MAAA,OAAA0B,EAAAxB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAUGjC,OAAA,OAAA,OAAA,SAAAK,EAAAQ,GAAA,IAAAgD,EAAA,OAAA9C,mBAAAC,MAAA,SAAA8C,GAAA,OAAA,OAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,KAAA,EAAA,OAAA2C,EAAA5C,KAAA,EAAA4C,EAAA3C,KAAA,EAAAJ,mBAAAK,MAAAlB,SAAA6D,kBAAA1D,EAAAiC,OAAAC,KAAA,KAAA,EAAA,GAAAsB,EAAAC,EAAAnC,KAAA,CAAAmC,EAAA3C,KAAA,EAAA,MAAA,OAAA2C,EAAAF,OAAA,SAgEN/C,EAAIiB,OAAO,KAAKF,KAAK,CAAEG,QAAS,oBAhE1B,KAAA,EAmEflB,EAAIe,KAAK,CAAEG,QAAS,4BAA6BS,KAAMqB,IAnExCC,EAAA3C,KAAA,GAAA,MAAA,KAAA,EAAA2C,EAAA5C,KAAA,EAAA4C,EAAAjC,GAAAiC,EAAA,MAAA,GAAAjD,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,0BAAAC,MAAA8B,EAAAjC,GAAAE,UAAA,KAAA,GAAA,IAAA,MAAA,OAAA+B,EAAA7B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIiBF,OAAAA,IAAAA,YAAS,SAAA1B,EAAAQ,GAAA,IAAAmD,EAAA,OAAAjD,mBAAAC,MAAA,SAAAiD,GAAA,OAAA,OAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,KAAA,EAAA,OAAA8C,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,EAAAJ,mBAAAK,MAwEjBlB,SAASwD,kBA5ElBrD,EAAAiC,OAAAC,GAMf1B,CAAAA,KAAIe,CAAAA,MAAJ,IANe,CAAA+B,KAAA,KAI0B,KAAA,EAAA,GAwEnCK,EAxEmCC,EAAAtC,KAAA,CAAAsC,EAAA9C,KAAA,EAAA,MAAA,OAAA8C,EAAAL,OAAA,SAJ1B/C,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,oBAI0B,KAAA,EAIlBA,EAAAA,KAAAA,GAJkBkC,EAAA9C,KAAA,GAAA,MAAA,KAAA,EAAA8C,EAAA/C,KAAA,EAAA+C,EAAApC,GAAAoC,EAAA,MAAA,GAIpBpD,EAAAiB,OAArB,KAAAF,KAAA,CAAAG,QAAA,wBAAAC,MAAAiC,EAAApC,GAAAE,UAJyC,KAAA,GAAA,IAAA,MAAA,OAAAkC,EAAAhC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAJ1BjC,OAAA0B,IAAA,UAAA,SAAArB,EAAAQ,GAAA,IAAAqD,EAAAC,EAAAjC,EAAA,OAAAnB,mBAAAC,MAAA,SAAAoD,GAAA,OAAA,OAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,KAAA,EAAA,GAAA+C,EAAA7D,EAAAgE,MAAAH,OAAAhB,QAAAC,IAAA,gBAAAe,GAAAA,EAAA,CAAAE,EAAAjD,KAAA,EAAA,MAAA,OAAAiD,EAAAR,OAAA,SAYnB/C,EAAAiB,OAAA,KAAAF,KAAA,CAAAG,QAAA,6BAZmB,KAAA,EAAA,OAAAqC,EAAAlD,KAAA,EAoGTiD,EAAc,IAAIG,OAAOJ,EAAQ,KApGxBE,EAAAjD,KAAA,EAAAJ,mBAAAK,MAagClB,SAAAmB,KAAA,CAAAkD,IAAA,CAAA,CAAAjD,MAAA6C,GAAA,CAAAvB,QAAAuB,OAbhC,KAAA,EAAA,GA4GM,KA/F0BjC,EAbhCkC,EAAAzC,MA4GL6C,OA5GK,OAAAJ,EAAAR,OAAA,SAagC/C,EAAAiB,OAGdzB,KAAI+C,KAA/B9B,CAAAA,QAHyC,wCAbhC8C,EAAAjD,KAAA,GAAA,MAAA,KAAA,GAoBT4B,EAAAA,KAAAA,GApBSqB,EAAAjD,KAAA,GAAA,MAAA,KAAA,GAAAiD,EAAAlD,KAAA,GAAAkD,EAAAvC,GAAAuC,EAAA,MAAA,GAsBbxB,QAAAA,MAAAA,uBAAAA,EAAAA,IACAC,EAAAA,OAAAA,KAAQA,KAAAA,CAAMd,QAAI,wBAHSC,MAAAoC,EAAAvC,GAAAE,UApBd,KAAA,GAAA,IAAA,MAAA,OAAAqC,EAAAnC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAagCwC,OAAAC,QAAA1E","file":"blogRoutes.min.js","sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst BlogPost = require('../models/BlogPost');\nconst router = express.Router();\n\n// Multer configuration for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, './uploads/'); // Directory to store uploaded files\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname); // Unique filename\n  },\n});\n\nconst upload = multer({ storage });\n\n// Fetch trending blog posts (top 5 by likes)\nrouter.get('/trending', async (req, res) => {\n  try {\n    const trendingPosts = await BlogPost.find({}, { title: 1, likes: 1, image: 1 })\n      .sort({ likes: -1 })\n      .limit(5);\n    res.json(trendingPosts);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching trending posts', error: err.message });\n  }\n});\n\n// Fetch all blog posts\nrouter.get('/', async (req, res) => {\n  try {\n    const posts = await BlogPost.find().sort({ date: -1 }); // Sort by newest first\n    res.json(posts);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching posts', error: err.message });\n  }\n});\n\n// Fetch a single blog post by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const post = await BlogPost.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n    res.json(post);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching the post', error: err.message });\n  }\n});\n\n// Create a new blog post\nrouter.post('/create', upload.single('imageFile'), async (req, res) => {\n  console.log('Uploaded file:', req.file); // Debug uploaded file\n  console.log('Request body:', req.body); // Debug request body\n  const { title, content, author } = req.body;\n  const imageFile = req.file ? '/uploads/' + req.file.filename : null;\n\n  try {\n    const newPost = new BlogPost({\n      title,\n      content,\n      author: author || 'Admin',\n      image: imageFile,\n      likes: 0,\n      date: new Date(),\n    });\n\n    const savedPost = await newPost.save();\n    res.status(201).json(savedPost); // Return the created post\n  } catch (err) {\n    res.status(500).json({ message: 'Error creating the post', error: err.message });\n  }\n});\n\n// Update a blog post by ID\nrouter.put('/:id', upload.single('imageFile'), async (req, res) => {\n  const { title, content, author } = req.body;\n  const imageFile = req.file ? '/uploads/' + req.file.filename : null;\n\n  try {\n    const updatedPost = await BlogPost.findByIdAndUpdate(\n      req.params.id,\n      { title, content, author, image: imageFile || req.body.image },\n      { new: true }\n    );\n\n    if (!updatedPost) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    res.json(updatedPost);\n  } catch (err) {\n    res.status(500).json({ message: 'Error updating the post', error: err.message });\n  }\n});\n\n// Delete a blog post by ID\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const deletedPost = await BlogPost.findByIdAndDelete(req.params.id);\n\n    if (!deletedPost) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    res.json({ message: 'Post deleted successfully', post: deletedPost });\n  } catch (err) {\n    res.status(500).json({ message: 'Error deleting the post', error: err.message });\n  }\n});\n\n// Like a blog post by ID\nrouter.put('/:id/like', async (req, res) => {\n  try {\n    const likedPost = await BlogPost.findByIdAndUpdate(\n      req.params.id,\n      { $inc: { likes: 1 } },\n      { new: true }\n    );\n\n    if (!likedPost) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    res.json(likedPost);\n  } catch (err) {\n    res.status(500).json({ message: 'Error liking the post', error: err.message });\n  }\n});\nrouter.get('/search', async (req, res) => {\n  const search = req.query.search; // Get the search term from the query\n  console.log('Search Query:', search); // Debugging the search term\n\n  if (!search) {\n    return res.status(400).json({ message: 'No search term provided' });\n  }\n\n  try {\n    const searchRegex = new RegExp(search, 'i'); // Case-insensitive search\n    const posts = await BlogPost.find({\n      $or: [\n        { title: searchRegex }, // Search in title\n        { content: searchRegex }, // Search in content\n      ],\n    });\n\n    if (posts.length === 0) {\n      return res.status(404).json({ message: 'No posts found matching your query' });\n    }\n\n    res.json(posts); // Return matching posts\n  } catch (error) {\n    console.error('Error during search:', error);\n    res.status(500).json({ message: 'Internal server error', error: error.message });\n  }\n});\n\n\n\nmodule.exports = router;\n"]}