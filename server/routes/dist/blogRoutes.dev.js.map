{"version":3,"sources":["blogRoutes.js"],"names":["express","require","multer","BlogPost","router","Router","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","get","res","find","title","likes","image","sort","limit","trendingPosts","json","status","message","error","date","posts","findById","params","id","post","single","console","log","body","content","author","imageFile","newPost","save","savedPost","put","findByIdAndUpdate","updatedPost","findByIdAndDelete","deletedPost","$inc","likedPost","search","query","searchRegex","RegExp","$or","length","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst BlogPost = require('../models/BlogPost');\nconst router = express.Router();\n\n// Multer configuration for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, './uploads/'); // Directory to store uploaded files\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname); // Unique filename\n  },\n});\n\nconst upload = multer({ storage });\n\n// Fetch trending blog posts (top 5 by likes)\nrouter.get('/trending', async (req, res) => {\n  try {\n    const trendingPosts = await BlogPost.find({}, { title: 1, likes: 1, image: 1 })\n      .sort({ likes: -1 })\n      .limit(5);\n    res.json(trendingPosts);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching trending posts', error: err.message });\n  }\n});\n\n// Fetch all blog posts\nrouter.get('/', async (req, res) => {\n  try {\n    const posts = await BlogPost.find().sort({ date: -1 }); // Sort by newest first\n    res.json(posts);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching posts', error: err.message });\n  }\n});\n\n// Fetch a single blog post by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const post = await BlogPost.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n    res.json(post);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching the post', error: err.message });\n  }\n});\n\n// Create a new blog post\nrouter.post('/create', upload.single('imageFile'), async (req, res) => {\n  console.log('Uploaded file:', req.file); // Debug uploaded file\n  console.log('Request body:', req.body); // Debug request body\n  const { title, content, author } = req.body;\n  const imageFile = req.file ? '/uploads/' + req.file.filename : null;\n\n  try {\n    const newPost = new BlogPost({\n      title,\n      content,\n      author: author || 'Admin',\n      image: imageFile,\n      likes: 0,\n      date: new Date(),\n    });\n\n    const savedPost = await newPost.save();\n    res.status(201).json(savedPost); // Return the created post\n  } catch (err) {\n    res.status(500).json({ message: 'Error creating the post', error: err.message });\n  }\n});\n\n// Update a blog post by ID\nrouter.put('/:id', upload.single('imageFile'), async (req, res) => {\n  const { title, content, author } = req.body;\n  const imageFile = req.file ? '/uploads/' + req.file.filename : null;\n\n  try {\n    const updatedPost = await BlogPost.findByIdAndUpdate(\n      req.params.id,\n      { title, content, author, image: imageFile || req.body.image },\n      { new: true }\n    );\n\n    if (!updatedPost) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    res.json(updatedPost);\n  } catch (err) {\n    res.status(500).json({ message: 'Error updating the post', error: err.message });\n  }\n});\n\n// Delete a blog post by ID\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const deletedPost = await BlogPost.findByIdAndDelete(req.params.id);\n\n    if (!deletedPost) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    res.json({ message: 'Post deleted successfully', post: deletedPost });\n  } catch (err) {\n    res.status(500).json({ message: 'Error deleting the post', error: err.message });\n  }\n});\n\n// Like a blog post by ID\nrouter.put('/:id/like', async (req, res) => {\n  try {\n    const likedPost = await BlogPost.findByIdAndUpdate(\n      req.params.id,\n      { $inc: { likes: 1 } },\n      { new: true }\n    );\n\n    if (!likedPost) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    res.json(likedPost);\n  } catch (err) {\n    res.status(500).json({ message: 'Error liking the post', error: err.message });\n  }\n});\nrouter.get('/search', async (req, res) => {\n  const search = req.query.search; // Get the search term from the query\n  console.log('Search Query:', search); // Debugging the search term\n\n  if (!search) {\n    return res.status(400).json({ message: 'No search term provided' });\n  }\n\n  try {\n    const searchRegex = new RegExp(search, 'i'); // Case-insensitive search\n    const posts = await BlogPost.find({\n      $or: [\n        { title: searchRegex }, // Search in title\n        { content: searchRegex }, // Search in content\n      ],\n    });\n\n    if (posts.length === 0) {\n      return res.status(404).json({ message: 'No posts found matching your query' });\n    }\n\n    res.json(posts); // Return matching posts\n  } catch (error) {\n    console.error('Error during search:', error);\n    res.status(500).json({ message: 'Internal server error', error: error.message });\n  }\n});\n\n\n\nmodule.exports = router;\n"],"file":"blogRoutes.dev.js"}