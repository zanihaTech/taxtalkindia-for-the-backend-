{"version":3,"sources":["authRoutes.js"],"names":["express","require","bcrypt","Admin","router","Router","req","res","_req$body","username","password","admin","token","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","post","sent","abrupt","status","json","message","compare","jwt","sign","id","_id","process","env","JWT_SECRET","expiresIn","t0","stop","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASD,QAAQ,YADjBD,IAAOC,QAAGA,gBAGVE,MAAQF,QAAQ,mBAEhBG,OAASJ,QAAQK,SAFvBD,OAAMD,KAAQF,SAAQ,SAAAK,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAT,EAMWF,EAAIY,KAA3BT,EANYD,EAMZC,SAAUC,EANEF,EAMFE,SANEK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MAKAhB,MAAAiB,QAAA,CAAOd,SAAAA,KALP,KAAA,EAAA,GAKfe,EALeN,EAAAO,KAAA,CAAAP,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAQ,OAAA,SAYThB,EAAIiB,OAAO,KAAKC,KAAK,CAAEC,QAAS,yBAZvB,KAAA,EAAA,OAAAX,EAAAE,KAAA,EAAAJ,mBAAAM,MAKAjB,OAAAyB,QAAAjB,EAAAC,EAAAD,WALA,KAAA,EAAA,GAAAK,EAAAO,KAAA,CAAAP,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAQ,OAAA,SAKAhB,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,QAAA,yBALA,KAAA,GAUgBd,EALhBgB,IAAAC,KAAA,CAAAC,GAAAnB,EAAAoB,KAAAC,QAAAC,IAAAC,WAAA,CAAAC,UAAA,OAkBlB5B,EAAIkB,KAAK,CAAEb,MAAAA,IAvBOG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAUZJ,QAAAA,MAAAA,EAAAA,IAgBNJ,EAAIiB,OAAO,KAAKC,KAAK,CAAEC,QAAS,iBA1Bd,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAsB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAKAC,OAAAC,QAAAnC","file":"authRoutes.min.js","sourcesContent":["const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst Admin = require('../models/Admin'); // Ensure this path is correct\n\nconst router = express.Router();\n\n// Admin login route\nrouter.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n\n  try {\n    // Find admin by username\n    const admin = await Admin.findOne({ username });\n    if (!admin) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Compare passwords\n    const isMatch = await bcrypt.compare(password, admin.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign({ id: admin._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\nmodule.exports = router;\n"]}