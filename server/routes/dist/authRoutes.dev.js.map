{"version":3,"sources":["authRoutes.js"],"names":["express","require","bcrypt","jwt","Admin","router","Router","post","req","res","body","username","password","findOne","admin","status","json","message","compare","isMatch","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","console","error","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,iBAAD,CAArB,C,CAA0C;;;AAE1C,IAAMI,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAf,C,CAEA;;AACAD,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACWD,GAAG,CAACE,IADf,EACZC,QADY,aACZA,QADY,EACFC,QADE,aACFA,QADE;AAAA;AAAA;AAAA,0CAKER,KAAK,CAACS,OAAN,CAAc;AAAEF,YAAAA,QAAQ,EAARA;AAAF,WAAd,CALF;;AAAA;AAKZG,UAAAA,KALY;;AAAA,cAMbA,KANa;AAAA;AAAA;AAAA;;AAAA,2CAOTL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPS;;AAAA;AAAA;AAAA,0CAWIf,MAAM,CAACgB,OAAP,CAAeN,QAAf,EAAyBE,KAAK,CAACF,QAA/B,CAXJ;;AAAA;AAWZO,UAAAA,OAXY;;AAAA,cAYbA,OAZa;AAAA;AAAA;AAAA;;AAAA,2CAaTV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbS;;AAAA;AAgBlB;AACMG,UAAAA,KAjBY,GAiBJjB,GAAG,CAACkB,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAER,KAAK,CAACS;AAAZ,WAAT,EAA4BC,OAAO,CAACC,GAAR,CAAYC,UAAxC,EAAoD;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAApD,CAjBI;AAkBlBlB,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,YAAAA,KAAK,EAALA;AAAF,WAAT;AAlBkB;AAAA;;AAAA;AAAA;AAAA;AAoBlBQ,UAAAA,OAAO,CAACC,KAAR;AACApB,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AArBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAyBAa,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst Admin = require('../models/Admin'); // Ensure this path is correct\n\nconst router = express.Router();\n\n// Admin login route\nrouter.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n\n  try {\n    // Find admin by username\n    const admin = await Admin.findOne({ username });\n    if (!admin) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Compare passwords\n    const isMatch = await bcrypt.compare(password, admin.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign({ id: admin._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\nmodule.exports = router;\n"],"file":"authRoutes.dev.js"}